<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- Definicion de autodicovering
	Indicamos el paquete donde estan las clases que Spring en automatico
	los va a agregar en la fabrica de Spring si estan tienen por ejemplo la
	etiqueta '@Component' u otras para este proposito. 
	-->
	<context:component-scan base-package="concursantes"/>

	<!-- Configuracion para para permitir que las clases que no implementan 
	     interfaces sean "proxieded".
	     Solucion el problema del error:
	     'java.lang.ClassCastException: com.sun.proxy.$Proxy19 cannot be cast to concursantes.Malabarista'
	     al ejecutar el metodo de junit test 'TestConcursoTalentos'
	-->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	

	<!-- Codigo equivalente en java: Malabarista concursante1 = new Malabarista(10); 
	
	<bean id="solei" class="concursantes.Malabarista">
		<constructor-arg value="10" />
	</bean>
 	-->
	<!-- La logica de esta configuración es similar a la siguiente, sin embargo 
		Spring lo hace a través del API de reflection: Poema sonetoSorJuana = new 
		Soneto(); Concursante soleiRecitador = new MalabaristaRecitador(10, sonetoSorJuana) 
	 	
	<bean id="sonetoSorJuana" class="concursantes.Soneto" />

	<bean id="soleiRecitador" class="concursantes.MalabaristaRecitador">
		<constructor-arg value="15" />
		<constructor-arg ref="sonetoSorJuana" />
	</bean>
 	-->
	<!-- Codigo musico
	
	<bean id="piano" class="concursantes.Piano" />
	<bean id="jasonPiano" class="concursantes.Musico">
		<property name="cancion" value="Noche de paz" />
		<property name="instrumento" ref="piano" />
	</bean>
  	-->
  	
	<!-- Cambio de instrumento de piano a saxofon -->
	<bean id="saxofon" class="concursantes.Saxofon" />
	<bean id="jasonSaxofon" class="concursantes.Musico">
		<property name="cancion" value="Equinox" />
		<!-- bean interno (inner bean) para no compartirlo con otros musicos -->
		<property name="instrumento">
			<bean class="concursantes.Saxofon" />
		</property>
	</bean>
	
	<!-- =============================================================================
								 CONFIGURACION DE AOP
								 version 5.0
	     ============================================================================= 
	-->	
<!-- 	<aop:config>
		Asociamos el aspecto a una clase. En este caso al bean 'audiencia' de la clase 'Audiencia'
		<aop:aspect ref="audiencia">
			Con el poincut definimos los metodos que vamos a monitorear.
			<aop:pointcut expression="execution(* concursantes.Concursante.ejecutar(..))" 
				          id="show"/>
			
			Definimos en que momento se va a ejecutar la funcionalidad de AOP	          
			<aop:before pointcut-ref="show" method="sentarse"/>
			<aop:before pointcut-ref="show" method="apagarCelulares"/>
			<aop:after-returning pointcut-ref="show" method="aplaudir"/>
			<aop:after-throwing pointcut-ref="show" method="devolucion"/>			  
		</aop:aspect>
	</aop:config> -->
	
	<!-- =============================================================================
								 CONFIGURACION DE AOP
								 version 6.0
	     ============================================================================= 
	-->
	<aop:config>
		<!-- Asociamos el aspecto a una clase. En este caso al bean 'audiencia' de la clase 'Audiencia' -->
		<aop:aspect ref="audiencia">
			<!-- Con el poincut definimos los metodos que vamos a monitorear. -->
			<aop:pointcut expression="execution(* concursantes.Concursante.ejecutar(..))" 
				          id="show"/>
			
			<!-- El metodo 'monitorearShow' sera la responzable de hacer las 4 funciones 
			     de la version 5.0 -->	          
			<aop:around pointcut-ref="show" method="monitorearShow"/>
		</aop:aspect>
	</aop:config>
	
</beans>
